{"version":3,"sources":["../node_modules/h8k-components/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","components/nav-bar/index.js","App.js","registerServiceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","NavBar","state","this","props","activeTab","tabHandler","tabs","className","data-testid","label","value","onClick","Component","TABS","App","useState","header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","applyPolyfills","defineCustomElements"],"mappings":"wNAAA,IAAIA,EAAM,CACT,wBAAyB,CACxB,GACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,GACzBG,EAAOC,QAAUf,G,2HCnBIgB,G,kNACnBC,MAAQ,G,uDAEE,IAAD,EACiCC,KAAKC,MAArCC,EADD,EACCA,UAAWC,EADZ,EACYA,WAAYC,EADxB,EACwBA,KAE/B,OAGE,yBAAKC,UAAU,2DACf,yBAAKA,UAAU,mEACVC,cAAY,mBAGTF,EAAKvB,KAAI,gBAAG0B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACR,yBAAKH,UAAU,mBACd,6BAASA,UAAU,YAAYC,cAAY,eACzC,0BAGAD,UAAS,cAASG,IAAUN,EAAY,eAAiB,IAEzDO,QAAS,WAAQN,EAAWK,KAC1BD,c,GAvBgBG,cCG9BC,G,MAAO,CACX,CAAEJ,MAAO,OAAQC,MAAO,aACxB,CAAED,MAAO,OAAQC,MAAO,aACxB,CAAED,MAAO,UAAWC,MAAO,gBAC3B,CAAED,MAAO,QAASC,MAAO,gBAuBZI,MApBf,WAAe,MAEqBC,mBAAS,aAF9B,mBAELX,EAFK,KAEMC,EAFN,KAGb,OACE,6BACE,gCAAYW,OAfJ,mBAgBR,kBAAC,EAAD,CAAQV,KAAMO,EAAMT,UAAWA,EAAWC,WAAYA,IACtD,yBAAKE,UAAU,2DACb,yBAAKA,UAAU,mBACZ,IACD,6BAASA,UAAU,YAAYC,cAAY,eAEzC,8BAAOJ,QCjBba,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTlC,MAAK,SAAAsC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfwB,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,WCxEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,GAAN,sBAEP1B,IAiDV,SAAiCO,GAE/BsB,MAAMtB,GACHlC,MAAK,SAAAyD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAM9D,MAAK,SAAAsC,GACjCA,EAAayB,aAAa/D,MAAK,WAC7B6B,OAAOC,SAASkC,eAKpB/B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAM9D,MAAK,WACjC4C,QAAQC,IACN,gHAMJZ,EAAgBC,OCxCxBgC,GAEAC,cAAiBnE,MAAK,WACjBoE,YAAqBvC,a","file":"static/js/main.abbd3f79.chunk.js","sourcesContent":["var map = {\n\t\"./h8k-logo_2.entry.js\": [\n\t\t23,\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 18;\nmodule.exports = webpackAsyncContext;","import React, {Component} from \"react\";\nimport \"./index.css\";\n\nimport PropTypes from \"prop-types\";\n\nexport default class NavBar extends Component {\n  state = {}\n\n  render() {\n    const { activeTab, tabHandler, tabs } = this.props;\n\n    return (\n      // first wrap the the component with styling\n      // *** I changed some of the original HackerRank styling to allow for better spacing of the navigation bar\n      <div className=\"layout-column justify-content-center align-items-center\">\n      <div className=\"layout-row justify-content-around align-items-center mt-20 links\"\n           data-testid=\"navigation-tabs\">\n             {/* inside of this parent container we run a MAP of the tab props (an object array with two key values: label and value) */}\n             {/* the label will be returned by the map in a child div */}\n             {tabs.map(({ label, value }) => (\n               <div className=\"card w-20 ma-15\">\n                <section className=\"card-text\" data-testid=\"tab-content\">\n                  <span \n                  // pass the value using the tabHandler which acts as our function\n                  // the activeTab prop will show the currently active tab in the NavBar component (using a className)\n                  className={`tab ${value === activeTab ? 'selected-tab' : ''}`}\n                  // the onClick will pass this value to show the active tab \n                  onClick={() => { tabHandler(value); }}\n                  >{label}</span>\n                </section>\n             </div>\n             ))}\n      </div>\n    </div>\n  );\n  }\n}\n\n// use the compenent to manage the tabs using prop-types\nNavBar.propTypes = {\n  activeTab: PropTypes.number.isRequired,\n  tabHandler: PropTypes.func.isRequired,\n  tab: PropTypes.arrayOf(Object).isRequired,\n};","import React, {useState}  from 'react';\nimport './App.css';\nimport NavBar from './components/nav-bar/index.js';\nimport 'h8k-components';\n\nconst title = \"Navigation Bar\";\n\n// create an array of tabs each with two key values that will show the title of the tab and its respective content\nconst TABS = [\n  { label: \"Home\", value: \"HOME PAGE\" },\n  { label: \"News\", value: \"NEWS PAGE\" },\n  { label: \"Contact\", value: \"CONTACT PAGE\" },\n  { label: \"About\", value: \"ABOUT PAGE\" }\n];\n\nfunction App() {\n  // use hooks to manage the activeTab prop\n  const [ activeTab, tabHandler ] = useState(\"HOME PAGE\");\n  return (\n    <div>\n      <h8k-navbar header={title} />\n      <NavBar tabs={TABS} activeTab={activeTab} tabHandler={tabHandler} />\n      <div className=\"layout-column justify-content-center align-items-center\">\n        <div className=\"card w-20 ma-20\">\n          {\" \"}\n          <section className=\"card-text\" data-testid=\"tab-content\">\n            {/* here we use the activeTab to render the appropriate content for the chosen tab */}\n            <span>{activeTab}</span>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport {applyPolyfills, defineCustomElements} from 'h8k-components/loader';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\napplyPolyfills().then(() => {\n     defineCustomElements(window);\n});\n"],"sourceRoot":""}